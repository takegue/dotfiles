#!/bin/bash
layout_python-anaconda() {
   # Ref Url: https://github.com/direnv/direnv/wiki/Python
  local ANACONDA_HOME="${HOME}/.local/src/anaconda3"
  PATH_add "$ANACONDA_HOME"/bin
  eval "$(conda shell.bash hook)"

  local env_name="$1"
  conda activate ${env_name}
   # if [ -n $1 ]; then
   #   # Explicit environment name from layout command.
   #   local env_name="$1"
   #   conda activate ${env_name}
   # # #elif (grep -q name: environment.yml); then
   #   # Detect environment name from `environment.yml` file in `.envrc` directory
   #   source activate %(grep name: environment.yml | sed -e ‚Äòs/name: //‚Äô | cut -d ‚Äú‚Äò‚Äú -f 2 | cut -d ‚Äò‚Äú‚Äò -f 2)
   # else
   #   (>&2 echo No environment specified);
   #   exit 1;
   # fi;
}

layout_python-venv() {
    local python=${1:-python3}
    [[ $# -gt 0 ]] && shift
    unset PYTHONHOME
    if [[ -n $VIRTUAL_ENV ]]; then
        VIRTUAL_ENV=$(realpath "${VIRTUAL_ENV}")
    else
        local python_version
        python_version=$("$python" -c "import platform; print(platform.python_version())")
        if [[ -z $python_version ]]; then
            log_error "Could not detect Python version"
            return 1
        fi
        VIRTUAL_ENV=$PWD/.direnv/python-venv-$python_version
    fi
    export VIRTUAL_ENV
    if [[ ! -d $VIRTUAL_ENV ]]; then
        log_status "no venv found; creating $VIRTUAL_ENV"
        "$python" -m venv "$VIRTUAL_ENV"
    fi
    PATH_add "$VIRTUAL_ENV/bin"
}

use_gke() {
  # Usage: use gke <gcp_project> <context_name> 

  # Styling
  bold=$(tput bold)
  normal=$(tput sgr0)
  red=$(tput setaf 1)

  local gcp_project=${1}
  local kubernetes_cluster=${2}
  if [[ -z ${kubernetes_cluster} ]]; then
    return
  fi

  config_direnv="$(pwd)/.direnv"
  # Kubernetes Configuration
  if [ -n "$kubernetes_cluster" ]; then
      config_k8s=$config_direnv/kube
      if [ ! -d "$config_k8s" ]; then
        mkdir -p $config_k8s
      fi
      export KUBECONFIG="$config_k8s/config"
      if [ ! -f $KUBECONFIG ]; then
          local arg_gcp_project=
          if [[ -n $gcp_project ]]; then
            arg_gcp_project="--project $gcp_project"
          fi
          echo "Creating Kubernetes cluster config for ${bold}$kubernetes_cluster${normal}"
          gcloud --no-user-output-enabled beta container clusters get-credentials ${kubernetes_cluster} $arg_gcp_project
      else
          echo "Changing active Kubernetes cluster to ${bold}$kubernetes_cluster${normal}"
      fi

  fi
}

layout_python-poetry() {
  if [[ ! -f pyproject.toml ]]; then
    log_error 'No pyproject.toml found. Use `poetry new` or `poetry init` to create one first.'
    exit 2
  fi

  # create venv if it doesn't exist
  poetry run true

  export VIRTUAL_ENV=$(poetry env info --path)
  export POETRY_ACTIVE=1
  PATH_add "$VIRTUAL_ENV/bin"
}

use_terraform() {
  PROMPT="
(üèóÔ∏è  TF|:\$(terraform workspace show))
$PROMPT"
  export PROMPT
}
