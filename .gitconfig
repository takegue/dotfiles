[include]
    path = .local.gitconfig

[core]
    whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes

[color]
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[push]
    default = current

[init]
    templatedir = ~/.git_template

[log]
    date = short
    decorate = full

[commit]
    verbose = true

[diff]
    tool = vimdiff
    algorithm = patience

; [credential]
;     helper = "cache --timeout 1800"

[diff "office"]
    binary = true
    textconv = "tika --text"

[difftool.latex]
    cmd = latexdiff-vc --git "$LOCAL" "$REMOTE"

[remote]
    pushDefault="origin"

[difftool]
    prompt = false

[alias]
    loga = log --graph --oneline --decorate=full --date=short --format='%C(yellow)%h%C(reset) %C(magenta)[%ad]%C(reset)%C(auto)%d%C(reset) %s %C(cyan)@%an%C(reset)'
    ignore = !"f() { local s=$1; shift; \
        while [ $# -gt 0 ]; do s=\"$s,$1\"; shift; done;\
        curl \"https://www.toptal.com/developers/gitignore/api/$s\"; }; f"
    ldiff = difftool -t latex
    ; pushf = push --force-with-lease --force-if-includes
    pushf = push --force-with-lease
    # List contributors with number of commits
    contributors = "!f() { git shortlog --summary --numbered $@; }; f"
    mainline = "!f() { git switch -C $(git rev-parse --abbrev-ref origin/HEAD | cut -d/ -f2) origin/HEAD; }; f"


    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    changelog = log --pretty=format:'- %s (%h)'


    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    showpr = "!f() { git log --merges --oneline --reverse --ancestry-path $1...origin/HEAD  | grep 'Merge pull request #' | head -n 1; }; f "
    # Merge GitHub pull request on top of the `master` branch
    mpr = "!f() { \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git rebase master pr/$1 && \
			git checkout master && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)  Closes #$1.\"; \
		fi \
    }; f"

	mkwt = "!f() { git worktree add \"$(git rev-parse --show-toplevel)+$@\" "$@"; }; f"
	rmwt = "!f() { git worktree remove \"$(git rev-parse --show-toplevel)+$@\"; }; f"
	gone = "!f() { git fetch --all --prune; git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -D; }; f"


[commit]
    template = ~/.gitmessage

[merge]
    conflictStyle = "diff3"

[rebase]
    autosquash = true
    autostash = true

[ghq]
    root = "~/.ghq"
[pull]
    ff = only

[rerere]
	enabled = true
