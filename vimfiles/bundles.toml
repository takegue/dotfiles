[[plugins]] # Shougo/dein.vim {{{
  repo = 'Shougo/dein.vim'
  hook_add = '''
    let g:dein#install_progress_type = 'title'
    let g:dein#install_message_type = 'none'
    let g:dein#auto_recache = 0
  '''
#}}}

# Appearence Plugins {{{
[[plugins]] # vim-indent {{{
  on_if = 1
  repo = 'nathanaelkane/vim-indent-guides'
  hook_post_source= '''
    let g:indent_guides_auto_colors = 0
    hi IndentGuidesOdd  ctermbg=237
    hi IndentGuidesEven ctermbg=None
  '''
  hook_source = '''
      let g:indent_guides_enable_on_vim_startup = 1
      let g:indent_guides_start_level = 2
      let g:indent_guides_guide_size = 1
      let g:indent_guides_default_mapping = 1
  '''
#}}}


[[plugins]] # nvim-lua/plenary.nvim {{{
  repo = 'nvim-lua/plenary.nvim'
# }}}

[[plugins]] # nvim-lua/popup.nvim {{{
  repo = 'nvim-lua/popup.nvim'
# }}}

[[plugins]] # rcarriga/nvim-notify {{{
  repo = 'rcarriga/nvim-notify'
# }}}

[[plugins]] # nvim-tresitter/nvim-treesitter {{{
  repo = 'nvim-treesitter/nvim-treesitter'
  hook_post_update = '''
    TSUpdate
  '''
  hook_source = '''lua <<EOF
    require'nvim-treesitter.configs'.setup {
      -- A list of parser names, or "all"
      ensure_installed = { "c", "lua", "rust", "vim", "python", "typescript", "javascript"},
      -- Install parsers synchronously (only applied to `ensure_installed`)
      sync_install = false,
      highlight = {
        -- `false` will disable the whole extension
        enable = true,
        disable = {},
        -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
        -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
        -- Using this option may slow down your editor, and you may see some duplicate highlights.
        -- Instead of true it can also be a list of languages
        additional_vim_regex_highlighting = false,
      },
    }
EOF
  '''
# }}}

[[plugins]] # nvim-treesitter/nvim-treesitter-textobjects {{{
  repo = 'nvim-treesitter/nvim-treesitter-textobjects'
  
  hook_source = '''lua <<EOF
    require('nvim-treesitter.configs').setup {
    textobjects = {
        select = {
        enable = true,

        -- Automatically jump forward to textobj, similar to targets.vim
        lookahead = true,

        keymaps = {
            -- You can use the capture groups defined in textobjects.scm
            ["af"] = "@function.outer",
            ["if"] = "@function.inner",
            ["ac"] = "@class.outer",
            ["ic"] = "@class.inner",
        },
        },
    },
    }
EOF
  '''
# }}}

[[plugins]] # RRethy/nvim-treesitter-textsubjects {{{
  repo = 'RRethy/nvim-treesitter-textsubjects'
  hook_source = '''lua <<EOF
  require('nvim-treesitter.configs').setup {
      textsubjects = {
          enable = true,
          prev_selection = ',', -- (Optional) keymap to select the previous selection
              keymaps = {
                  ['.'] = 'textsubjects-smart',
                  [';'] = 'textsubjects-container-outer',
                  ['i;'] = 'textsubjects-container-inner',
              },
      },
  }
EOF
  '''
# }}}

[[plugins]] # David-Kunz/treesitter-unit {{{
  repo = 'David-Kunz/treesitter-unit'
  hook_post_source = '''
    xnoremap iu :lua require"treesitter-unit".select()<CR>
    xnoremap au :lua require"treesitter-unit".select(true)<CR>
    onoremap iu :<c-u>lua require"treesitter-unit".select()<CR>
    onoremap au :<c-u>lua require"treesitter-unit".select(true)<CR>
  '''
# }}}

[[plugins]] # mfussenegger/nvim-treehopper {{{
  repo = 'mfussenegger/nvim-treehopper'
  
  hook_add = '''
    omap     <silent> m :<C-U>lua require('tsht').nodes()<CR>
    vnoremap <silent> m :lua require('tsht').nodes()<CR>
  '''
  
# }}}

[[plugins]] # kyazdani42/nvim-web-devicons {{{
  repo = 'kyazdani42/nvim-web-devicons'
# }}}

[[plugins]] # nvim-lualine/lualine.nvim {{{
  on_if = 1
  repo = 'nvim-lualine/lualine.nvim'
  depends = ['nvim-web-devicons']
  hook_source = '''lua <<EOF
    require('lualine').setup {
        options = {
            icons_enabled = true,
            theme = 'ayu_mirage',
            disabled_filetypes = {},
            always_divide_middle = true,
            globalstatus = false,
        },
    }
EOF
'''


[[plugins]] # akinsho/bufferline.nvim' {{{
  repo = 'akinsho/bufferline.nvim'
  rev = 'v2.*'
  depends = ['nvim-web-devicons']
  hook_add = '''lua <<EOF
    vim.opt.termguicolors = true
    require("bufferline").setup{}
EOF
'''

# }}}

# Colorschemes : {{{
[[plugins]]
  repo = 'tomasr/molokai'

[[plugins]] 
  repo = 'NLKNguyen/papercolor-theme'

[[plugins]] 
  repo = 'flazz/vim-colorschemes'
#}}}
#}}}

# Utilities {{{

    [[plugins]] # AndrewRadev/linediff.vim {{{
      repo = 'AndrewRadev/linediff.vim'
    # }}}

    [[plugins]] # daisuzu/translategoogle.vim {{{
      on_cmd = 'Trans'
      repo = 'daisuzu/translategoogle.vim'
    #}}}

    [[plugins]]# mattn/webapi-vim {{{{
      repo = 'mattn/webapi-vim'
  # }}}

    [[plugins]] # kana/vim-metarw{{{
      repo = 'kana/vim-metarw'
    # }}}

# Text Object Settings: {{{

[[plugins]] # kana/vim-textobj-user {{{
  repo = 'kana/vim-textobj-user'
#}}}

[[plugins]] # kana/vim-textobj-datetime {{{
 # 日付オブジェクト#ada, add, adt
  repo = 'kana/vim-textobj-datetime'
  on_if = 1
#}}}

[[plugins]] # kana/vim-textobj-entire {{{
 # 全体オブジェクト
 # ae, ai
 repo = 'kana/vim-textobj-entire'
#}}}

[[plugins]] # kana/vim-textobj-fold {{{
# 降りたたみオブジェクト
# az, iz
  repo = 'kana/vim-textobj-fold'
 #}}}

[[plugins]] # kana/vim-textobj-function {{{
  repo = 'kana/vim-textobj-function'
  on_ft = ['cpp', 'java', 'vim']
 #}}}

[[plugins]] # mattn/vim-textobj-url {{{
# URLオブジェクト
# au, iu
  repo = 'mattn/vim-textobj-url'
  on_if = 1
#}}}

[[plugins]] # sgur/vim-textobj-parameter {{{
  repo = 'sgur/vim-textobj-parameter'
  on_if = 1
#}}}

# }}}

# Vim Operator Settings: {{{

[[plugins]] # tpope/vim-commentary {{{
 # コメント切り替えオペレータ
  repo = 'tpope/vim-commentary'
  on_if = 1
  hook_add = '''
      autocmd FileType markdown let b:commentary_format = "<!-- %s -->"
      autocmd FileType sql let b:commentary_format = "-- %s "
  '''

 #}}}

[[plugins]] # tpope/vim-repeat {{{
  repo = 'tpope/vim-repeat'
 #}}}

[[plugins]] # tpope/vim-surround {{{
 # surround記号編集オペレータ
  repo = 'tpope/vim-surround'
  on_if = 1
 #}}}

[[plugins]] # tpope/vim-unimpaired {{{
 # バッファ移動用等
  repo = 'tpope/vim-unimpaired'
  on_if = 1
 #}}}

[[plugins]] # emonkak/vim-operator-sort {{{
  repo = 'emonkak/vim-operator-sort'
  on_if = 1
 #}}}

[[plugins]] # kana/vim-operator-replace {{{
  repo = 'kana/vim-operator-replace'
  on_if = 1
  hook_add = '''
    map _ <Plug>(operator-replace)
  '''

[[plugins]] # kana/vim-operator-user {{{
  repo = 'kana/vim-operator-user'

[[plugins]] # michaeljsmith/vim-indent-object {{{
  repo = 'michaeljsmith/vim-indent-object'
  on_if = 1
 #}}}

 #}}}

 #}}}


[[plugins]] # AndrewRadev/switch.vim {{{
  repo = 'AndrewRadev/switch.vim'
  hook_add = '''
    nnoremap <silient> - :Switch<CR>
    augroup switch_autocmd
      autocmd FileType gitrebase let b:switch_custom_definitions = [ ['pick', 'reword', 'edit', 'squash' , 'fixup' , 'exec', 'drop'], ]
      autocmd FileType python let g:switch_custom_definitions =
            \[
            \   ['and', 'or'],
            \   {
            \     '\(.\+\) if \(.\+\) else \(.\+\)' : {
            \        '\(\s*\)\(.\+\) = \(.\+\) if \(.\+\) else \(.\+\)' :
            \             '\1if \4:\1    \2 = \3\1else:\1    \2 = \5'
            \      }
            \   },
            \]
    augroup END

    let g:switch_custom_definitions = [
          \   ['TRUE', 'FALSE'], ['True', 'False'], ['true', 'false'],
          \   ['dev', 'stg', 'prod'],
          \   ['ENABLE', 'DISABLE'], ['Enable', 'Disable'], ['enable', 'disable'],
          \   ['!=', '=='],
          \   {
          \     '>\(=\)\@!'  : '>=',
          \     '>='  : '<',
          \     '<\(=\)\@!'  : '<=',
          \     '<='  : '>',
          \   },
          \   {
          \     '\<[a-z0-9]\+_\k\+\>': {
          \       '_\(.\)': '\U\1',
          \       '\<\(.\)': '\l\1'
          \     },
          \     '\<[A-Za-z][a-z0-9]\+[A-Z]\k\+\>': {
          \       '\(\u\)': '_\l\1',
          \       '\<_': ''
          \     },
          \   }
          \ ]
    let g:switch_increment_definitions = []
    let g:switch_decrement_definitions = []
    let g:switch_mapping = "-"
  '''


# }}}
#}}}

# Unite plugins {{{

  [[plugins]] # Shougo/denite.nvim {{{
    repo = 'Shougo/denite.nvim'
    if = "has('nvim') && has('python3')"
    on_cmd = 'Denite'

    hook_post_source = '''
      call denite#custom#alias('source', 'file/rec/git', 'file/rec')
      call denite#custom#var('file/rec/git', 'command', ['git', 'ls-files', '-co', '--exclude-standard'])

      call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>')
      call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>')
      call denite#custom#map('insert', '<C-f>', '<denite:scroll_page_forwards>')
      call denite#custom#map('insert', '<C-b>', '<denite:scroll_page_backwards>')

      call denite#custom#source('help', 'matchers', ['matcher/regexp'])

      " unite grep に ag(The Silver Searcher) を使う
      if tkngue#util#executable('rg')
        call denite#custom#var('grep', 'command', ['rg'])
        call denite#custom#var('grep', 'recursive_opts', [])
        call denite#custom#var('grep', 'final_opts', [])
        call denite#custom#var('grep', 'separator', ['--'])
        call denite#custom#var('grep', 'default_opts',
            \ ['--vimgrep', '--no-heading'])
      elseif tkngue#util#executable('ag')
        call denite#custom#var('grep', 'command', ['ag'])
        call denite#custom#var('grep', 'recursive_opts', ['R'])
        call denite#custom#var('grep', 'final_opts', [])
        call denite#custom#var('grep', 'separator', [])
        call denite#custom#var('grep', 'default_opts',
            \ ['--nopager', '--nocolor', '--nogroup', '--column'])
      endif
    '''

    hook_add = '''
      cnoremap <silent><expr> h<Space>  getcmdtype() == ':' && getcmdline() == '' ? 'Denite -start-filter help<CR>' : 'h '
      nnoremap <silent> <Space>. :<C-u>Denite -start-filter -buffer-name=dotfiles file/rec/git:~/.dotfiles<CR>


      nnoremap [denite]    <Nop>
      nmap    <Leader>f  [denite]
      nnoremap  [denite]s  :<C-u>Denite -start-filter source<CR>

      nnoremap <silent>  [denite]f  :<C-u>Denite -start-filter -buffer-name=anything
              \ buffer `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec:~/Downloads'`
              \ file_mru <CR>

      nnoremap <silent> [denite]r  :<C-u>Denite
            \ -buffer-name=register unite:register<CR>
      nnoremap <silent> [denite]s  :<C-u>Denite
            \ -buffer-name=snippets
            \ unite:neosnippet <CR>
      nnoremap <silent> [denite]me :<C-u>Denite -start-filter output:message
            \ -buffer-name=messages <CR>
      nnoremap <silent> [denite]p :<C-u>Denite directory_rec:~/.ghq -start-filter 
            \ -buffer-name=projects <CR>
      nnoremap <silent> [denite]o  :<C-u>Denite -start-filter outline
            \ -buffer-name=outline <CR>

      nnoremap <silent> [denite]l :<C-u>Denite -start-filter  -buffer-name=search-lines line<CR>
      nnoremap <silent> [denite]gf :<C-u>Denite -start-filter -buffer-name=search-buffers grep:$buffers<CR>
      nnoremap <silent> [denite]gj :<C-u>Denite -start-filter -buffer-name=search-junks grep:$JUNK:-i<CR>
      nnoremap <silent> [denite]gg :<C-u>Denite -start-filter -buffer-name=search-grep grep<CR>
      nnoremap <silent> [denite]gc :<C-u>Denite -start-filter -buffer-name=search-grep grep <CR><C-R><C-W><CR>
      nnoremap <silent> [denite]z :<C-u>Denite -silent fold -vertical -winwidth=40 -no-start-insert<CR>
      nnoremap <silent> g<C-h>  :<C-u>DeniteWithCursorWord -start-filter -buffer-name=help help<CR>

      " Define mappings
      autocmd FileType denite call s:denite_my_settings()
      function! s:denite_my_settings() abort
        nnoremap <silent><buffer><expr> <TAB>
        \ denite#do_map('choose_action')
        nnoremap <silent><buffer><expr> <CR>
        \ denite#do_map('do_action')
        nnoremap <silent><buffer><expr> d
        \ denite#do_map('do_action', 'delete')
        nnoremap <silent><buffer><expr> p
        \ denite#do_map('do_action', 'preview')
        nnoremap <silent><buffer><expr> q
        \ denite#do_map('quit')
        nnoremap <silent><buffer><expr> i
        \ denite#do_map('open_filter_buffer')
        nnoremap <silent><buffer><expr> <Space>
        \ denite#do_map('toggle_select').'j'
      endfunction
    '''
  # }}}

  [[plugins]] # Shougo/unite.vim {{{
    repo = 'Shougo/unite.vim'
    on_cmd = "Unite"
    on_if = "has('nvim') && has('python3')"
    # on_map = "{ 'n' : [denite]}"
    # on_func = "denite"
    hook_add = '''
      if !has('nvim')
        nnoremap [unite]    <Nop>
        nmap    <Leader>f  [unite]
        nnoremap  [unite]s  :<C-u>Unite source<CR>
        nnoremap  [unite]f  :<C-u>Unite -buffer-name=files -no-split
              \ bookmark buffer file file_rec/git file_mru file_rec:~/Downloads
              \ file/new directory/new <CR>
        nnoremap <silent> [unite]F  :<C-u>UniteWithCurrentDir -buffer-name=files
              \ file_rec/neovim
              \ file/new directory/new <CR>
        nnoremap <silent> [unite]b  :<C-u>UniteWithBufferDir
              \ -buffer-name=files -prompt=%\  buffer bookmark file<CR>
        nnoremap <silent> [unite]r  :<C-u>Unite
              \ -buffer-name=register register<CR>
        nnoremap <silent> [unite]o  :<C-u>Unite outline tag
              \ -buffer-name=outline <CR>
        " nnoremap <silent> [unite]n  :<C-u>Unite
        "      \ -buffer-name=tundles
        "      \ neobundle/search <CR>
        nnoremap <silent> [unite]s  :<c-u>unite
              \ -buffer-name=snippets
              \ neosnippet <CR>
        nnoremap <silent> [unite]ma :<C-u>Unite output:map output:map!
              \ -buffer-name=mapping -hide-source-names<CR>
        nnoremap <silent> [unite]me :<C-u>Unite output:message
              \ -buffer-name=messages <CR>
        " nnoremap <silent> [unite]b  :<C-u>Unite<Space>bookmark<CR>
        nnoremap <silent> [unite]a  :<C-u>UniteBookmarkAdd<CR>

        nnoremap <silent> [unite]l :<C-u>Unite  -buffer-name=search-lines line<CR>
        nnoremap <qsilent> [unite]gf :<C-u>Unite -buffer-name=search-buffers grep:$buffers<CR>
        nnoremap <silent> [unite]gj :<C-u>Unite -buffer-name=search-junks grep:$HOME/Dropbox/junks:-iR<CR>
        nnoremap <silent> [unite]gg :<C-u>Unite -buffer-name=search-cd grep:./:-iR<CR>
        nnoremap <silent> [unite]gc :<C-u>Unite -buffer-name=search-current-word grep:$buffers:<C-R><C-W><CR>
        nnoremap <silent> [unite]R  :<C-u>Unite -buffer-name=resume resume<CR>
        nnoremap <silent> [unite]h  :<C-u>Unite -buffer-name=help help<CR>
        nnoremap <silent> [unite]z :<C-u>Unite -silent fold -vertical -winwidth=40 -no-start-insert<CR>
        nnoremap <silent> g<C-h>  :<C-u>UniteWithCursorWord -buffer-name=help help<CR>
        nnoremap <silent> [\ :UniteNext<CR>
        nnoremap <silent> ]\ :UnitePrevious<CR>
        nnoremap <silent> ]\ :UniteFirst<CR>
        nnoremap <silent> [\ :UniteLast<CR>
      endif
    '''

    hook_source = '''
      call unite#custom#profile('default', 'context', {
            \   'start_insert': 1,
            \   'direction': 'dynamictop',
            \   'prompt': '» ',
            \ })
      function! s:unite_my_settings() "{{{
        " Overwrite settings.
        imap <buffer> jj      <Plug>(unite_insert_leave)
        imap <buffer> kk      <Plug>(unite_insert_leave)
        "imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)

        imap <buffer><expr> j unite#smart_map('j', '')
        imap <buffer> <TAB>   <Plug>(unite_select_next_line)
        imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)
        imap <buffer> '     <Plug>(unite_quick_match_default_action)
        nmap <buffer> '     <Plug>(unite_quick_match_default_action)
        imap <buffer><expr> x
              \ unite#smart_map('x', "\<Plug>(unite_quick_match_choose_action)")
        nmap <buffer> x     <Plug>(unite_quick_match_choose_action)
        imap <buffer> <C-z>     <Plug>(unite_toggle_transpose_window)
        nmap <buffer> <C-y>     <Plug>(unite_narrowing_path)
        " nmap <buffer> <C-j>     <Plug>(unite_toggle_auto_preview)
        imap <buffer> <C-r>     <Plug>(unite_narrowing_input_history)
        nnoremap <silent><buffer><expr> l
              \ unite#smart_map('l', unite#do_action('default'))

        let unite = unite#get_current_unite()
        if unite.profile_name ==# 'search'
          nnoremap <silent><buffer><expr> r     unite#do_action('replace')
        else
          nnoremap <silent><buffer><expr> r     unite#do_action('rename')
        endif

        nnoremap <silent><buffer><expr> cd     unite#do_action('lcd')
        nnoremap <buffer><expr>S      unite#mappings#set_current_sorters(
              \ empty(unite#mappings#get_current_sorters()) ?
              \ ['sorter_reverse'] : [])
        nnoremap <buffer><expr>M    unite#mappings#set_current_matchers(
              \ empty(unite#mappings#get_current_matchers()) ?
              \ ['matcher_migemo'] : [])
        nnoremap <buffer><expr>R    unite#mappings#set_current_matchers(
              \ empty(unite#mappings#get_current_matchers()) ?
              \ ['matcher_regexp'] : [])

        " Runs "split" action by <C-s>.
        imap <silent><buffer><expr> <C-s>     unite#do_action('split')

        setl nofoldenable
      endfunction "}}}

      autocmd FileType unite call s:unite_my_settings()
      autocmd FileType denite-filter call s:denite_filter_my_settings()
      function! s:denite_filter_my_settings() abort
        imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
      endfunction


    '''
  # }}}

#}}}

[[plugins]] # Shougo/neomru.vim {{{
  repo = 'Shougo/neomru.vim'
  on_source = [
    'unite',
    'denite.nvim',
  ]
 #}}}

[[plugins]] # tsukkee/unite-tag {{{
  repo = 'tsukkee/unite-tag'
 #}}}

[[plugins]] # Shougo/unite-outline {{{
  repo = 'Shougo/unite-outline'
# }}}
 #}}}

[[plugins]] # Shougo/context_filetype.vim {{{
  repo = 'Shougo/context_filetype.vim'
  hook_source = '''
    let g:context_filetype#filetypes = {
          \ 'markdown': [
          \   {
          \     'start' : '^---$',
          \     'end' : '^...$',
          \     'filetype' : 'yaml',
          \   },
          \   {
          \    'start' : '^\s*```\s*\(\h\w*\)',
          \    'end' : '^\s*```$', 'filetype' : '\1',
          \   },
          \ ],
          \}

    let g:context_filetype#search_offset = 30
  '''
#}}}

[[plugins]] # vim-precious {{{
# Vim constext filetype
  repo = 'osyo-manga/vim-precious'
  augroup = 'vim-precious'
  on_ft = ['markdown', 'rst', 'help', 'toml']
  on_cmd = ['Precious']
  depends = ['context_filetype.vim', 'vim-textobj-user']

  hook_source = '''
     " let g:precious_enable_switchers = {
     "         \   "*" : { "setfiletype" : 0 },
     "         \}
     let g:precious_enable_switch_CursorMoved = {
           \   "*" : 0
           \}

     let g:precious_enable_switch_CursorMoved_i = {
           \   "*" : 0
           \}

     augroup precious_autocmd
       autocmd!
       autocmd FileType markdown,rst,help,toml
             \ nmap <buffer><leader>r
             \ <Plug>(precious-quickrun-op)icx

       " autocmd User PreciousFileType :echo precious#context_filetype()
     augroup END
   '''
#}}}

[[plugins]] # thinca/vim-template {{{
  # TODO: ロードが激重なので少し考える
  repo = 'thinca/vim-template'
  if = 1 # TODO: if=1にするとなぜか読み込まれるようになる. バグ？ defaultがlazy load???
  hook_add = '''
    " command! -nargs=0 -complete=filetype Temp call s:open_template()

    nmap <Space>/ :<C-u>call <SID>open_template()<CR>
    function! s:open_template()
      let l:template_name = template#search(expand('%:p'))
      if l:template_name == ''
        let l:template_name = globpath(g:template_basedir, '/template'). '/template.' .&ft
      endif
      let l:filename = input('Template("template" are replaced with wild card): ', l:template_name)
      if l:filename != ''
        let l:template_dir = escape(fnamemodify(l:filename, ":p:h"), ' ()')
        if !isdirectory(l:template_dir)
          call mkdir(l:template_dir, 'p')
        endif
        execute 'edit ' . l:filename
      endif
    endfunction

    augroup vim-template
      autocmd!
      autocmd User plugin-template-loaded
            \ silent! %s/<%=\(.\{-}\)%>/\=eval(submatch(1))/ge
            \ | silent! %s/<+DATE+>/\=strftime('%Y-%m-%d')/ge
            \ | silent! %s/<+MONTH+>/\=eval(submatch(1))/ge
            \ | silent! %s/<+FILENAME+>/\=expand('%:'))/ge
            \ | if search('<+CURSOR+>') |  execute 'normal zR"_da>'| endif
    augroup END
'''
# }}}

[[plugins]] # osyo-manga/shabadou.vim  {{{
  repo = 'osyo-manga/shabadou.vim'
#}}}

[[plugins]] # jceb/vim-hier  {{{
  repo = 'jceb/vim-hier'
# }}}

[[plugins]] # tamy0612/quickrun-job-runner.nvim {{{
  repo = 'tamy0612/quickrun-job-runner.nvim'
# }}}

[[plugins]] # thinca/vim-quickrun  {{{
  repo = 'thinca/vim-quickrun'
  on_event = ['BufWritePost']
  depends = ['vim-hier', 'shabadou.vim']


  hook_source = '''
    let g:quickrun_config = deepcopy(g:quickrun#default_config)
    call extend(g:quickrun_config, {
          \ "_": {
          \   "hook/my_anime/enable" : 1,
          \   "hook/my_anime/wait" : 2,
          \   "hook/qfsigns_update/enable_exit":   1,
          \   "hook/qfsigns_update/priority_exit": 3,
          \   "runner"                    : has("nvim") ? "nvim_job" : "job",
          \   "outputter"                 : 'buffer_legacy',
          \   "outputter/buffer_legacy/split"   : 'bot %{winwidth(0) * 2 < winheight(0) * 5 ? "" : "vertical"} new',
          \   "outputter/buffer_legacy/close_on_empty" : 1,
          \},
          \ "watchdogs_checker/_" : {
          \      'outputter/quickfix/open_cmd' : '',
          \ },
          \ "watchdogs_checker/jalatexdiff" : {
          \      'command': 'jlatexdiff-vc',
          \      'cmdopt' : '-r --git --force -e utf8',
          \      'exec' : '%c %o %s',
          \ },
          \ "watchdogs_checker/latexdiff" : {
          \      'command': 'latexdiff-vc',
          \      'cmdopt' : '-r --git --force -e utf8',
          \      'exec' : '%c %o %s',
          \ },
          \ "watchdogs_checker/redpen" : {
          \      'cmdopt' : '-r plain2 -f %{&filetype}',
          \      'errorformat' : '%EDocument:\ %f,\t%CLine:%l\,\ Offset: %c,$C\t\t%s,%Z%m,%-G,%-G%m',
          \}})
    let g:quickrun_config['runner'] = has('nvim') ? 'nvim_job' : has('job') ? 'job' : 'vimproc'
    let g:quickrun_config.jq = {
          \ 'command' : 'jq',
          \ 'exec' : '%c %o -f %s',
          \}
    let g:quickrun_config.json ={
          \ 'command' : 'jq',
          \ 'cmdopt' : ".",
          \ 'exec' : "%c '%o' %s",
          \}
    let g:quickrun_config.tex ={
          \ 'command' : 'latexmk',
          \ 'cmdopt' : '-pdf',
          \}
    let g:quickrun_config['rust/cargo/test'] = {
          \   'command': 'cargo',
          \   'exec': '%c run %o',
          \ }
    let g:quickrun_config['tex/watchdogs_checker'] = {
          \  "type" :"watchdogs_checker/jalatexdiff"
          \}
    " let g:quickrun_config.sql ={
    "       \ 'command' : 'mysql',
    "       \ 'cmdopt'  : '%{MakeMySQLCommandOptions()}',
    "       \ 'exec'    : ['%c %o < %s' ] ,
    "       \}
    let g:quickrun_config.sql ={
          \ 'command' : 'bq',
          \ 'cmdopt'  : '--nouse_legacy_sql --dry_run',
          \ 'exec'    : ['%c query --nouse_legacy_sql --dry_run < %s ' ] ,
          \}
    let g:quickrun_config['php'] = {
          \ 'command': 'testrunner',
          \ 'cmdopt': 'phpunit -p vendor/autoload.php',
          \ 'exec': '%c %o %s',
          \}
    let g:quickrun_config['php.unit'] = {
          \ 'outputter': 'phpunit',
          \ 'command': './vendor/bin/phpunit',
          \ 'exec': '%c %o %s',
          \}
    let g:quickrun_config['python'] = {
          \ 'command': 'python',
          \ 'outputter': 'error',
          \ 'hook/time/enable': '0',
          \ 'outputter/error/success': 'buffer',
          \ 'outputter/error/error': 'quickfix',
          \ 'outputter/quickfix/errorformat': '%C%p^,%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%+Z%[%^\ ]%m',
          \}
    let g:quickrun_config["php/watchdogs_checker"] = {
          \  'type' : "watchdogs_checker/phpcs",
          \ 'cmdopt': "--standard=PHPCompatibility --extensions=php,phtml,inc --runtime-set testVersion 5.6 -d date.timezone=Asia/Tokyo --report=emacs"
          \}
    let g:quickrun_config['python/watchdogs_checker'] = {
          \  "type" : "watchdogs_checker/flake8",
          \}
    let g:quickrun_config['python.pytest'] = {
          \ 'command': 'py.test',
          \ 'cmdopt': '-v'
          \}
    let g:quickrun_config['python.unit'] = {
          \ 'command': 'python',
          \}
    let g:quickrun_config.markdown  = {
          \ 'type' : 'markdown/pandoc',
          \ 'cmdopt': '-v -s -mathjax -f markdown -t html',
          \ 'outputter' : 'browser'
          \ }
    let g:quickrun_config.html  = {
          \ 'command' : 'cygstart',
          \ 'cmdopt'  : '%c %o' ,
          \ 'outputter' : 'browser'
          \ }
    let g:quickrun_config['ruby.rspec']  = {
          \ 'command': 'rspec'
          \ , 'cmdopt': '-f d'
          \ }

    function! MakeMySQLCommandOptions() "{{{
      if !exists("g:mysql_config_user")
        let g:mysql_config_user = input("user> ")
      endif
      if !exists("g:mysql_config_host")
        let g:mysql_config_host = input("host> ")
      endif
      if !exists("g:mysql_config_port")
        let g:mysql_config_port = input("port> ")
      endif
      if !exists("g:mysql_config_pass")
        let g:mysql_config_pass = inputsecret("password> ")
      endif
      if !exists("g:mysql_config_db")
        let g:mysql_config_db = input("database> ")
      endif

      let optlist = []
      if g:mysql_config_user != ''
        call add(optlist, '-u ' . g:mysql_config_user)
      endif
      if g:mysql_config_host != ''
        call add(optlist, '-h ' . g:mysql_config_host)
      endif
      if g:mysql_config_db != ''
        call add(optlist, '-D ' . g:mysql_config_db)
      endif
      if g:mysql_config_pass != ''
        call add(optlist, '-p' . g:mysql_config_pass)
      endif
      if g:mysql_config_port != ''
        call add(optlist, '-P ' . g:mysql_config_port)
      endif
      if exists("g:mysql_config_otheropts")
        call add(optlist, g:mysql_config_otheropts)
      endif
      return join(optlist, ' ')
    endfunction "}}}

    augroup QuickRunUnitTest
      autocmd!
      autocmd BufWinEnter,BufNewFile *test.php setlocal filetype=php.unit
      "autocmd BufWinEnter,BufNewFile test_*.py setlocal filetype=python.unit
      autocmd BufWinEnter,BufNewFile test_*.py setlocal filetype=python.pytest
      autocmd BufWinEnter,BufNewFile *.t setlocal filetype=perl.unit
      autocmd BufWinEnter,BufNewFile *_spec.rb setlocal filetype=ruby.rspec
    augroup END

    function! SmartQuickRun(argline, use_range, line1, line2) abort "{{{
      if !exists("b:smarter_quickrun_argline")
        let b:smarter_quickrun_argline = ""
      endif

      let l:argline = a:argline
      if empty(l:argline)
        let l:argline = b:smarter_quickrun_argline
      else
        let l:argline = a:argline
        let b:smarter_quickrun_argline = a:argline
      endif

      call quickrun#command#execute(l:argline, a:use_range, a:line1, a:line2)
    endfunction "}}}

    command! -nargs=* -range=0 -complete=customlist,quickrun#command#complete
        \ SmartQuickRun call SmartQuickRun(<q-args>, <count>, <line1>, <line2>)
    map <Leader>r :<C-u>SmartQuickRun<CR>
  '''

# }}}

[[plugins]] # osyo-manga/vim-watchdogs {{{
  repo = 'osyo-manga/vim-watchdogs'
  on_if = 0
  on_event = ['BufWritePost']
  hook_add = '''
    let g:watchdogs_check_BufWritePost_enables = {
        \   "cpp"     : 1,
        \   "python"  : 0,
        \   "ruby"    : 1,
        \   "haskell" : 1,
        \   "php" : 0,
        \   "tex" : 1,
        \}
    let g:watchdogs_check_CursorHold_enables = {
        \   "cpp"     : 1,
        \   "python"  : 0,
        \   "php" : 0,
        \   "ruby"    : 1,
        \   "haskell" : 1,
        \}
    let g:watchdogs_check_BufWritePost_enable_on_wq = 0
  '''
  hook_source = '''
  '''
  # }}}

[[plugins]] # mhinz/vim-signify {{{
  repo = 'mhinz/vim-signify'
  hook_add = '''
    let g:signify_skip_filename_pattern = []
  '''

#}}}

[[plugins]]  # keith/tmux.vim {{{
  repo = 'keith/tmux.vim'
# }}}

[[plugins]] # christoomey/vim-tmux-navigator {{{
  repo = 'christoomey/vim-tmux-navigator'
  hook_source = '''
    let g:tmux_navigator_save_on_switch = 0
    let g:tmux_navigator_no_mappings = 0
    nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
    nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
    nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
    nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
    nnoremap <silent> {Previous-Mapping} :TmuxNavigatePrevious<cr>
'''
 #}}}

[[plugins]] # mbbill/undotree {{{
# The ultimate undo history visualizer for VIM
  repo = 'mbbill/undotree'
  on_cmd = ['UndotreeToggle']
  hook_source = '''
    let g:undotree_WindowLayout=1
    let g:undotree_SplitWidth=40
    let g:undotree_SetFocusWhenToggle=1
  '''
  hook_add = '''
    nnoremap U :UndotreeToggle<CR>
  '''
# }}}

[[plugins]] # kana/vim-submode {{{
  repo = 'kana/vim-submode'
  on_event = 'WinEnter'
  hook_post_source = '''
    call submode#enter_with('changetab', 'n', '', 'gt', 'gt')
    call submode#enter_with('changetab', 'n', '', 'gT', 'gT')
    call submode#map('changetab', 'n', '', 't', 'gt')
    call submode#map('changetab', 'n', '', 'T', 'gT')
    call submode#map('changetab', 'n', '', 'gt', 'gt')
    call submode#map('changetab', 'n', '', 'gT', 'gT')

    call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
    call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
    call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>-')
    call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>+')
    call submode#map('winsize', 'n', '', '>', '<C-w>>')
    call submode#map('winsize', 'n', '', '<', '<C-w><')
    call submode#map('winsize', 'n', '', '+', '<C-w>-')
    call submode#map('winsize', 'n', '', '-', '<C-w>+')
  '''
# }}}

[[plugins]] # dannyob/quickfixstatus {{{
  repo = 'dannyob/quickfixstatus'
  # lazy = 1
  # depends = ['jceb/vim-hier', 'dannyob/quickfixstatus']
#}}}

  [[plugins]] # Konfekt/FastFold {{{
    repo = 'Konfekt/FastFold'
  # }}}

  [[plugins]] # justinmk/vim-dirvish {{{
    repo = 'justinmk/vim-dirvish'

    hook_add='''
      nnoremap <silent><leader>e :e %:p:h<CR>

      augroup dirvish_autocmd
      autocmd!
        autocmd FileType dirvish lcd %
        autocmd FileType dirvish autocmd BufEnter <silent><buffer> * execute ":Dirvish %<CR>"
        autocmd FileType dirvish nmap <silent><buffer> <BS> <Plug>(dirvish_up)
        autocmd FileType dirvish nnoremap <silent><buffer> O  :!open <C-R><C-F><CR>
        autocmd FileType dirvish nnoremap <silent><buffer>
          \ gh :silent keeppatterns g@\v/\.[^\/]+/?$@d<cr>
        autocmd FileType dirvish nnoremap <buffer> N :e <C-R>=expand('%')<CR>
        autocmd FileType dirvish nnoremap <buffer> K :call tkngue#util#intaractive_mkdir(expand('%:p'))<CR>
      augroup END

  '''
# }}}

# }}}

# Editor {{{

  [[plugins]] # deton/jasegment.vim {{{
    repo = 'deton/jasegment.vim'
  #}}}

  [[plugins]] # andymass/vim-matchup {{{
    repo = 'andymass/vim-matchup'
    hook_source = '''lua <<EOF
        require'nvim-treesitter.configs'.setup {
            matchup = {
                enable = true,
            },
        }
EOF
'''

#}}}

  [[plugins]] #  prabirshrestha/async.vim {{{
    repo = 'prabirshrestha/async.vim'
    if = '!has("nvim")'
  # }}}

    [[plugins]] #  prabirshrestha/asyncomplete-omni.vim {{{
      repo = 'prabirshrestha/asyncomplete-omni.vim'
      if = '!has("nvim")'
    # }}}

    [[plugins]] #  prabirshrestha/asyncomplete.vim {{{
      repo = 'prabirshrestha/asyncomplete.vim'
      if = '!has("nvim")'

      hook_add = '''
        inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
        function! Smart_CR()
            if pumvisible()
                call asyncomplete#close_popup()
                return
            endif

            if neosnippet#expandable() 
                return "\<Plug>(neosnippet_expand_or_jump)"
            endif

            return "\<cr>"
        endfunction
        imap <expr><CR> Smart_CR()

        function! Smart_TabComplete()
            if pumvisible()
                return "\<C-n>" 
            endif

            let line = getline('.')                         " current line

            let substr = strpart(line, -1, col('.')+1)      " from the start of the current
            " line to one character right
            " of the cursor
            let substr = matchstr(substr, "[^ \t]*$")       " word till cursor
            if (strlen(substr)==0)                          " nothing to match on empty string
                return "\<tab>"
            endif

            let has_period = match(substr, '\.') != -1      " position of period, if any
            let has_slash = match(substr, '\/') != -1       " position of slash, if any
            if (!has_period && !has_slash)
                return "\<tab>"
                "return "\<C-X>\<C-P>"                         " existing text matching
            elseif ( has_slash )
                return "\<C-X>\<C-F>"                         " file matching
            else
                "return asyncomplete#force_refresh()
                return "\<C-X>\<C-O>"                        " plugin matching
            endif
        endfunction

        imap <expr><tab> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : Smart_TabComplete()
        smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_jump_or_expand)" : "\<TAB>"


        snoremap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_jump_or_expand)" : "\<TAB>"
        inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

        " Plugin key-mappings.
        imap <C-k>     <Plug>(neosnippet_expand_or_jump)
        smap <C-k>     <Plug>(neosnippet_expand_or_jump)
        xmap <C-k>     <Plug>(neosnippet_expand_target)
        xmap <C-l>     <Plug>(neosnippet_start_unite_snippet_target)

      '''
    # }}}

  [[plugins]] #  prabirshrestha/asyncomplete-lsp.vim {{{
    repo = 'prabirshrestha/asyncomplete-lsp.vim'
    if = '!has("nvim")'
  # }}}


  [[plugins]] # neovim/nvim-lspconfig {{{
    repo = 'neovim/nvim-lspconfig'
  # }}}

  [[plugins]] # williamboman/nvim-lsp-installer {{{
    repo = 'williamboman/nvim-lsp-installer'
    if = 'has("nvim")'
    hook_post_source = '''lua <<EOF
      local lsp_installer = require"nvim-lsp-installer"
      lsp_installer.setup{}

      local lspconfig = require"lspconfig"
      for _, server in ipairs(lsp_installer.get_installed_servers()) do
        lspconfig[server.name].setup{}
      end
EOF
    '''
  # }}}

  [[plugins]] # hrsh7th/cmp-nvim-lsp {{{
    repo = 'hrsh7th/cmp-nvim-lsp'
  # }}}

  [[plugins]] 
    repo = 'hrsh7th/cmp-buffer'

  [[plugins]] 
    repo = 'hrsh7th/cmp-path'

  [[plugins]] 
    repo = 'hrsh7th/cmp-cmdline'

  [[plugins]] # hrsh7th/nvim-cmp {{{
    repo = 'hrsh7th/nvim-cmp'
    if = 'has("nvim")'
    hook_source = '''lua <<EOF

    -- Setup nvim-cmp.
    local cmp = require'cmp'

    cmp.setup({
        window = {
            completion = cmp.config.window.bordered(),
            documentation = cmp.config.window.bordered(),
        },
        mapping = cmp.mapping.preset.insert({
            ['<C-b>'] = cmp.mapping.scroll_docs(-4),
            ['<C-f>'] = cmp.mapping.scroll_docs(4),
            ['<C-Space>'] = cmp.mapping.complete(),
            ['<C-e>'] = cmp.mapping.abort(),
            ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
            }),
        sources = cmp.config.sources({{ name = 'nvim_lsp' }})
    })

    -- Set configuration for specific filetype.
    cmp.setup.filetype('gitcommit', {
        sources = cmp.config.sources({
        { name = 'cmp_git' }, -- You can specify the `cmp_git` source if you were installed it.
        }, {
        { name = 'buffer' },
        })
    })

    -- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
    cmp.setup.cmdline('/', {
        mapping = cmp.mapping.preset.cmdline(),
        sources = {
            { name = 'buffer' }
            }
        })

    -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
    -- cmp.setup.cmdline(':', {
    --     mapping = cmp.mapping.preset.cmdline(),
    --     sources = cmp.config.sources({
    --     { name = 'path' }
    --     }, {
    --     { name = 'cmdline' }
    --     })
    -- })

    -- Setup lspconfig.
    local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
EOF
    '''
  # }}}

[[plugins]] # vim-jp/vimdoc-ja {{{
  repo = 'vim-jp/vimdoc-ja'
 #}}}

[[plugins]] # beloglazov/vim-online-thesaurus {{{
# A Vim plugin for looking up words in an online thesaurus
  repo = 'beloglazov/vim-online-thesaurus'
  on_cmd = 'Thes'
  hook_source = '''
    let g:online_thesaurus_map_keys=0
  '''
# }}}

[[plugins]] # Shougo/neosnippet.vim {{{
  repo = 'Shougo/neosnippet.vim'
  on_i = 1
  hook_source = '''
    " Enable snipMate compatibility feature.
    let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#snippets_directory = ['~/.vim/bundle/vim-snippets/snippets','~/.vim/snippets']
    let g:neosnippet#enable_preview = 0

    " inoremap <expr>{} "{}\<\`0\`><C-O>F}"
    " inoremap <expr>() "()\<\`0\`><C-O>F)"
    " inoremap <expr>[] "[]\<\`0\`><C-O>F]"
    " inoremap <expr><> "<>\<\`0\`><C-O>F>"
    " inoremap <expr>'' "''\<\`0\`><C-O>F'"
    " inoremap <expr>`` "``\<\`0\`><C-O>3F`"
    " inoremap <expr>"" "\"\"\<\`0\`><C-O>F\""
  '''
  hook_post_source = '''
    augroup neosnippet_setting
      autocmd!
      " autocmd InsertLeave * NeoSnippetClearMarkers
    augroup END


    " For snippet_complete marker.
    if has('conceal')
      set conceallevel=0 concealcursor=nivc
    endif
  '''
# }}}

[[plugins]] # Shougo/neosnippet-snippets {{{
    repo = 'Shougo/neosnippet-snippets'
    # on_source = 'neosnippet.vim'
 #}}}

[[plugins]] # honza/vim-snippets {{{
  repo = 'honza/vim-snippets'
 #}}}

[[plugins]] # majutsushi/tagbar {{{
  on_cmd = 'Tagbar'
  repo = 'majutsushi/tagbar'

  hook_add = '''
    nnoremap <silent> ,q :TagbarToggle<CR>
  '''
 #}}}

[[plugins]] # haya14busa/incsearch.vim {{{
  repo = 'haya14busa/incsearch.vim'

  hook_add = '''
    " noremap <silent><expr> / incsearch#go({'command':'/','keymap':{'/':{'key':'\/','noremap':1}, ';' : {'key':'/;/', 'noremap':1}} })
    " noremap <silent><expr> ? incsearch#go({'command':'?','keymap':{'?':{'key':'\?','noremap':1}} })
    " map /  <Plug>(incsearch-forward)
    " map ?  <Plug>(incsearch-backward)
    " map g/ <Plug>(incsearch-stay)

    " let g:incsearch#separate_highlight = 1
    " let g:incsearch#auto_nohlsearch = 1
    " map n  <Plug>(incsearch-nohl-n)zz
    " map N  <Plug>(incsearch-nohl-N)zz
    " map *  <Plug>(incsearch-nohl-*)zz
    " map #  <Plug>(incsearch-nohl-#)zz
    " map g* <Plug>(incsearch-nohl-g*)zz
    " map g# <Plug>(incsearch-nohl-g#)zz
  '''
 #}}}

 #}}}

# Programming Langauge / FileType Plugins {{{

[[plugins]] # wannesm/wmgraphviz.vim {{{
  repo = 'wannesm/wmgraphviz.vim'
#}}}

[[plugins]] # cespare/vim-toml {{{
  repo = 'cespare/vim-toml'
  on_ft = 'toml'
#}}}

# Vim: {{{
  [[plugins]] # syngan/vim-vimlint {{{
  # lint for vim script
    repo = 'syngan/vim-vimlint'
  on_ft = 'vim'
  on_func = 'vimlint#vimlint'

  #}}}

  [[plugins]] # vim-jp/vital.vim {{{
    on_ft = 'vim'
    repo = 'vim-jp/vital.vim'
#}}}

#}}}

# Python {{{

[[plugins]]
  repo = 'Glench/Vim-Jinja2-Syntax'

[[plugins]] # klen/python-mode {{{
  repo = 'klen/python-mode'
  build ='pip install pylint pyflakes pep8'
  on_ft = ["python", "python3", "djangohtml"]

  hook_post_source ='''
    nnoremap <silent><F8> :<C-u>PymodeLintAuto<CR>
    nnoremap <silent><expr><leader>R  ":<C-u>VimShellInteractive --split='bot split \| resize 20' python ". expand('%').'<CR>'
  '''

  hook_source = '''
    if has('python3')
      let g:pymode_python = 'python3'
    elseif has('python')
      let g:pymode_python = 'python'
    else
    endif
    let g:pymode_lint_signs = 0

    let g:pymode = 1
    let g:pymode_warnings = 1
    " let g:pymode_paths = ['shutil', 'datetime', 'time',
    "       \ 'sys', 'itertools', 'collections', 'os', 'functools', 're']
    let g:pymode_trim_whitespaces = 1
    let g:pymode_options = 1
    let g:pymode_options_colorcolumn = 1
    let g:pymode_quickfix_minheight = 3
    let g:pymode_quickfix_maxheight = 6
    " let g:pymode_indent = []
    let g:pymode_folding = 1
    let g:pymode_motion = 1

    let g:pymode_doc = 1
    let g:pymode_doc_bind = 'K'
    let g:jedi#goto_command = 'gd'
    let g:pymode_virtualenv = 0
    let g:pymode_virtualenv_path = $PYENV_ROOT. "/versions"

    let g:pymode_run = 0            "QuickRunの方が優秀(asyncじゃない)
    " let g:pymode_run_bind = '<leader>R'

    let g:pymode_breakpoint = 1
    let g:pymode_breakpoint_bind = '<leader>b'

    "Check code on every save (every)
    let g:pymode_lint = 1
    let g:pymode_lint_unmodified = 0
    let g:pymode_lint_on_fly = 0
    let g:pymode_lint_message = 0
    " let g:pymode_lint_ignore = "E501,W"
    " let g:pymode_lint_select = "E501,W0011,W430"
    let g:pymode_lint_cwindow = 0

    let g:pymode_rope = 0

    let g:pymode_syntax_slow_sync = 0
    let g:pymode_syntax_all = 1
    let g:pymode_syntax_print_as_function = 0
    let g:pymode_syntax_highlight_equal_operator = g:pymode_syntax_all
    let g:pymode_syntax_highlight_stars_operator = g:pymode_syntax_all
    " Highlight 'self' keyword
    let g:pymode_syntax_highlight_self           = g:pymode_syntax_all
    " Highlight indent's errors
    let g:pymode_syntax_indent_errors            = g:pymode_syntax_all
    " Highlight space's errors
    let g:pymode_syntax_space_errors             = g:pymode_syntax_all
    " Highlight string formatting
    let g:pymode_syntax_string_formatting        = g:pymode_syntax_all
    let g:pymode_syntax_string_format            = g:pymode_syntax_all
    let g:pymode_syntax_string_templates         = g:pymode_syntax_all
    let g:pymode_syntax_doctests                 = g:pymode_syntax_all
    " Highlight builtin objects (True, False, ...)
    let g:pymode_syntax_builtin_objs             = g:pymode_syntax_all
    " Highlight builtin types (str, list, ...)
    let g:pymode_syntax_builtin_types            = g:pymode_syntax_all
    " Highlight exceptions (TypeError, ValueError, ...)
    let g:pymode_syntax_highlight_exceptions     = g:pymode_syntax_all
    " Highlight docstrings as pythonDocstring (otherwise as pythonString)
    let g:pymode_syntax_docstrings               = g:pymode_syntax_all
  '''

 #}}}

[[plugins]] # davidhalter/jedi-vim {{{
 # python plugin for vim
  repo = 'davidhalter/jedi-vim'
  # on_if = "!has('nvim')"
  if = 0
  on_ft = ['python', 'python3', 'djangohtml']
  # on_source = ['python-mode']

  hook_source = '''
  set noshowmode
  let g:jedi#auto_initialization  = 0
  let g:jedi#auto_vim_configuration = 0
  let g:jedi#popup_on_dot = 0
  let g:jedi#auto_close_doc = 0
  let g:jedi#show_call_signatures = 1
  let g:jedi#show_call_signatures_delay = 0

  let g:jedi#smart_auto_mappings = 1

  "quickrunと被るため大文字に変更
  " let g:jedi#rename_command = 'R'
  let g:jedi#max_doc_height = 20
  " let g:jedi#use_tabs_not_buffers = 1
  if has('nvim')
    let g:jedi#completions_enabled = 0
  endif

  "
  " Configuration necocomplete, because of conflicts to one {{{
  if !exists('g:neocomplete#sources#omni#functions')
    let g:neocomplete#sources#omni#functions = {}
  else
    let g:neocomplete#sources#omni#functions.python = 'jedi#completions'
  endif

  augroup jedi_myautocmd
      autocmd!
      autocmd FileType python nnoremap <silent> <buffer> R :call jedi#rename()<cr>
      autocmd FileType python nnoremap <silent> <buffer> <LocalLeader>n :call jedi#usages()<cr>
      autocmd FileType python nnoremap <silent> <buffer> gf :call jedi#goto_assignments()<cr>
      autocmd FileType python nnoremap <silent> <buffer> gd :call jedi#goto()<cr>
      autocmd FileType python nnoremap <silent> <buffer> K :call jedi#show_documentation()<cr>
      autocmd FileType python nnoremap <silent> <buffer> <leader>n :call jedi#usages()<cr>
      autocmd FileType python setlocal omnifunc=
      autocmd FileType python call jedi#configure_call_signatures()
      autocmd FileType python inoremap <silent> <buffer> <space> <C-R>=jedi#smart_auto_mappings()<CR>
      autocmd BufEnter,BufRead '__doc__' nnoremap <buffer>q  <C-w>c
          \| set previewwindow
          \| silent set foldlevel=1
  augroup END
  '''

# }}}

 #}}}

# }}}

# PlantUML {{{

[[plugins]] # scrooloose/vim-slumlord {{{
  repo = 'scrooloose/vim-slumlord'
  if = 1
# }}}

[[plugins]] # aklt/plantuml-syntax {{{
  repo = 'aklt/plantuml-syntax'
  if = 1

# }}}


# }}}

# WEB Programming {{{

[[plugins]] # elzr/vim-json {{{
  repo = 'elzr/vim-json'
  on_ft = ['json']
 #}}}

[[plugins]] # vito-c/jq.vim {{{
  repo = 'vito-c/jq.vim'
  on_ft = ['json','jq']
#}}}

[[plugins]] # hail2u/vim-css3-syntax {{{
    repo = 'hail2u/vim-css3-syntax'
  on_ft = ['css']
 #}}}

[[plugins]] # othree/html5.vim {{{
  repo = 'othree/html5.vim'
on_ft = ['html', 'svg', 'rdf']
#}}}

#}}}

# Rust: {{{

  [[plugins]] # rust-lang/rust.vim {{{
    repo = 'rust-lang/rust.vim'
    if = 1
    on_ft = 'rust'
    hook_add = '''
      let g:rustfmt_autosave = 1
      let g:cargo_shell_command_runner='botright vsplit term://'
    '''

  # }}}

  [[plugins]] # rhysd/rust-doc.vim {{{
    repo = 'rhysd/rust-doc.vim'
    on_ft = 'rust'
    hook_add = '''
      let g:rust_doc#define_map_K = 0
    '''

    hook_add = '''
      let g:rust_doc#downloaded_rust_doc_dir = tkngue#util#system('echo -n $(rustc --print sysroot)')
      augroup vimrc-rust
          autocmd!
          autocmd FileType rust nnoremap <buffer><silent>K :<C-u>DeniteCursorWord rust/doc<CR>
      augroup END
    '''

  # }}}

# }}}

# Writing {{{
[[plugins]] # rhysd/vim-grammarous {{{
    repo = 'rhysd/vim-grammarous'
  on_cmd = 'GrammarousCheck'
 #}}}

[[plugins]] # itchyny/dictionary.vim {{{
  repo = 'itchyny/dictionary.vim'
  if = "has('mac')"
hook_post_source = '''
  nnoremap <Leader>w :<C-u>Dictionary -cursor-word -no-duplicate<CR>
  autocmd FileType dicitonary  nnoremap <buffer><Leader>w :<C-u>Dictionary -cursor-word -no-duplicate<CR>
  autocmd FileType dicitonary  nnoremap <buffer><CR> <Plug>(dictionary_jump)
  autocmd FileType dicitonary  nnoremap <buffer><BS> <Plug>(dictionary_jump_back)
'''
 #}}}

[[plugins]] # junegunn/vim-easy-align {{{
  on_cmd = 'EasyAlign'
  repo = 'junegunn/vim-easy-align'
 #}}}

  # Latex {{{
  [[plugins]] # lervag/vimtex {{{
    repo = 'lervag/vimtex'
    on_ft='tex'

    hook_source = '''
      let g:latex_fold_parts = [
            \ "appendix",
            \ "frontmatter",
            \ "mainmatter",
            \ "backmatter",
            \ ]
      let g:latex_fold_sections = [
            \ "part",
            \ "chapter",
            \ "section",
            \ "subsection",
            \ "subsubsection",
            \ ]

    let g:latex_fold_enabled = 1
    let g:latex_fold_automatic = 1
    let g:latex_fold_envs = 1

    let g:vimtex_quickfix_ignored_warnings = [
        \ 'Underfull',
        \ 'Overfull',
        \ 'specifier changed to',
      \ ]

    let g:vimtex_compiler_latexmk = {
    \ 'backend' : has('nvim') ? 'nvim' : "jobs",
    \ 'background' : 1,
    \ 'build_dir' : '',
    \ 'callback' : 0,
    \ 'continuous' : 1,
    \ 'executable' : 'latexmk',
    \ 'options' : [
    \   '-pdfdvi',
    \   '-verbose',
    \   '-file-line-error',
    \   '-synctex=1',
    \   '-interaction=nonstopmode',
    \ ],
    \}

    if has('unix') && executable('okular')
      let g:vimtex_view_general_viewer = 'okular'
      let g:vimtex_view_general_options = '--unique @pdf\#src:@line@tex'
      let g:vimtex_view_general_options_latexmk = '--unique'
    elseif has('mac')
      let g:vimtex_view_general_viewer
            \ = '/Applications/Skim.app/Contents/SharedSupport/displayline'
      let g:vimtex_view_general_options = '@line @pdf @tex'

      let g:vimtex_latexmk_callback_hooks = ['UpdateSkim']
      function! UpdateSkim(status)
        if !a:status | return | endif

        let l:out = b:vimtex.out()
        let l:tex = expand('%:p')
        let l:cmd = [g:vimtex_view_general_viewer, '-r']
        if !empty(system('pgrep Skim'))
          call extend(l:cmd, ['-g'])
        endif
        if has('nvim')
          call jobstart(l:cmd + [line('.'), l:out, l:tex])
        elseif has('job')
          call job_start(l:cmd + [line('.'), l:out, l:tex])
        else
          call system(join(l:cmd + [line('.'), shellescape(l:out), shellescape(l:tex)], ' '))
        endif
      endfunction
    endif

    if has('nvim') && tkngue#util#executable('nvr')
      let g:vimtex_compiler_progname = 'nvr'
      let g:vimtex_latexmk_callback = 0
    endif

  '''
  #}}}

  [[plugins]] # kana/vim-smartchr {{{
    repo = 'kana/vim-smartchr'
  on_ft = 'tex'
 #}}}

  # }}}

  # Markdown {{{
  [[plugins]] # rcmdnk/vim-markdown {{{
    repo = 'rcmdnk/vim-markdown'
    # depends = ['tabular', 'vim-markdown-quote-syntax']
    on_ft = ['markdown']
    hook_source = '''
      let g:vim_markdown_math=0
      let g:vim_markdown_frontmatter = 0
      let g:vim_markdown_no_default_key_mappings = 0
      let g:vim_markdown_better_folding=0

      let g:vim_markdown_initial_foldlevel=2
      let g:vim_markdown_folding_disabled=1
    '''
    #}}}

  [[plugins]] # suan/vim-instant-markdown {{{
    repo = 'suan/vim-instant-markdown'
    on_ft = 'markdown'
    build = 'npm -g install instant-markdown-d'
    hook_source = '''
    " vim-instant-markdown will update the display in realtime
    let g:instant_markdown_slow = 1

    " you want to manually control this behavior
    let g:instant_markdown_autostart = 0
    '''
#}}}
  # }}}

  # RST {{{
  [[plugins]] # Rykka/InstantRst {{{
    repo = 'Rykka/InstantRst'
    on_ft = 'rst'
    hook_source = '''
      let g:instant_rst_localhost_only  = 1
    '''
  # }}}

  [[plugins]] # Rykka/riv.vim {{{
    repo = 'Rykka/riv.vim'
    on_ft = 'rst'
  # }}}

#}}}

    # VCS {{{

      [[plugins]] # lambdalisue/vim-gista {{{
        repo = 'lambdalisue/vim-gista'
        depends = ['unite.vim', 'tyru/open-browser.vim']
        on_cmd = 'Gista'
      #}}}

      [[plugins]] # tpope/vim-fugitive {{{
        repo = 'tpope/vim-fugitive'
        # on_if = 'finddir(".git", "./;/") != ""'
        if = 1
        augroup = 'fugitive'
        hook_add = '''
          function! ConfigOnGitRepository() "{{{
            let l:root_path = FugitiveGitDir()
            if l:root_path == ''
              return
            endif
            let l:root_path = escape(fnamemodify(l:root_path, ':p:h:h'), ' ()')

            " if &ft != 'dirvish' && getcwd() !~# l:root_path
            "   execute 'lcd '. root_path
            " endif

            setl nobackup
            nnoremap <buffer> [git] <Nop>
            nmap <buffer> <Leader>g [git]
            nnoremap <buffer> [git]w :<C-u>Gwrite<CR>
            nnoremap <buffer> [git]c :<C-u>Git commit<CR>
            nnoremap <buffer> [git]f :<C-u>Git commit --fixup HEAD<CR>
            nnoremap <buffer> [git]C :<C-u>Git commit --amend<CR>
            nnoremap <buffer> [git]s :<C-u>Git<CR>
            nnoremap <buffer> [git]d :<C-u>Gdiff<CR>
            nnoremap <buffer> [git]p :<C-u>Git push<CR>
            " nnoremap <buffer> [git]P :<C-u>call MyGitPull()<CR>
            if &l:path !~# l:root_path
              let &l:path = join([&g:path, root_path], ',')
            endif
          endfunction "}}}

          function! FugitiveMyMake() "{{{
            let l:error = system(&l:makeprg)
            redraw!
            " echohl Special
            for error in split(l:error, '\n')
              echomsg error
            endfor
            " echohl None
            execute 'call fugitive#Cwindow()'
          endfunction "}}}

          command! Make call FugitiveMyMake()

          augroup FUGITIVE
              autocmd!
              autocmd User Fugitive call ConfigOnGitRepository()
              " autocmd FileType dirvish call fugitive#detect(@%)
          augroup END
        '''
      #}}}
#
      [[plugins]]
        repo = 'tommcdo/vim-fubitive'
        depends = ['vim-fugitive']
        hook_add = '''
        let g:fubitive_domain_pattern = 'monotaro\.rickcloud\.jp'
        '''


      [[plugins]]
        repo = 'tpope/vim-rhubarb'
        depends = ['vim-fugitive']

      #[[plugins]] # moznion/github-commit-comment.vim {{{
      #    repo = 'moznion/github-commit-comment.vim'
      #    lazy = 1
      #    depends = ['jceb/vim-hier', 'dannyob/quickfixstatus']
      ##}}}

      [[plugins]] # cohama/agit.vim {{{
        on_cmd = 'Agit'
        repo = 'cohama/agit.vim'
      #}}}

    #}}}

    [[plugins]]
      repo = 'moro/vim-review'

# }}}

# GO {{{
  [[plugins]] # fatih/vim-go {{{
    repo = 'fatih/vim-go'
    on_ft = 'go'
  #}}}


# }}}

# PHP {{{

  # [[plugins]]
  #   repo = 'm2mdas/phpcomplete-extended'

  # [[plugins]]
  #   repo = 'shawncplus/phpcomplete.vim'
  #   on_ft = 'php'

  # [[plugins]]
  #   repo = 'php-vim/phpcd.vim'
  #   hook_post_source = '''
  #       " autocmd BufRead *.php setl omnifunc=phpcd#CompletePHP
  #   '''

  [[plugins]]
    repo = 'karakaram/vim-quickrun-phpunit'

  [[plugins]]  # xolox/vim-misc {{{
    repo = 'xolox/vim-misc'
    on_ft = 'lua'
  # }}}


# }}}

# Kotlin {{{

    [[plugins]] # udalov/kotlin-vim {{
        repo = 'udalov/kotlin-vim'
    # }}

# }}}

# Javascripts {{{

    [[plugins]] # leafgarland/typescript-vim {{
        repo = 'leafgarland/typescript-vim'
        on_ft = ['typescript', 'typescriptreact']
    # }}

    # [[plugins]]
    #     repo = 'mhartington/nvim-typescript'
    #     on_ft = 'typescript'
    #     build = './install.sh'

    # [[plugins]] # posva/vim-vue {{
    #     repo = 'posva/vim-vue'
    #     on_ft = 'javascript'
    #     build = 'make'
    # # }}

    # [[plugins]] # moll/vim-node {{
    #     repo = 'moll/vim-node'
    #     on_ft = 'javascript'
    # # }}

# }}}

# CSV {{{

    [[plugins]] # leafgarland/typescript-vim {{
        repo = 'chrisbra/csv.vim'
        on_ft = 'csv'
    # }}

# }}}

  # Other {{{

    [[plugins]]
      on_ft = ['yaml']
      repo = 'digitalrounin/vim-yaml-folds'

    [[plugins]] # thinca/vim-ref {{{
      repo = 'thinca/vim-ref'
      if = 1
      hook_add = '''
        "Ref webdictでalcを使う設定
        let g:ref_no_default_key_mappings = 0
        " let g:ref_source_webdict_cmd = 'lynx -dump -nonumbers %s'
        let g:ref_source_webdict_use_cache = 1
        let g:ref_source_webdict_sites = {
              \ 'alc' : {
              \   'url' : 'http://eow.alc.co.jp/%s/UTF-8/'
              \   },
              \ 'weblio' : {
              \   'url' : 'http://ejje.weblio.jp/content/%s/'
              \   }
              \ }
        let g:ref_source_webdict_sites['default'] = "weblio"

        let g:ref_phpmanual_path = $HOME . "/.vim/doc/phpmanual"

        let g:ref_detect_filetype=  {
              \ '_': ['man','webdict'],
              \ 'gitcommit': 'webdict',
              \ 'markdown': ['webdict', 'ALC'],
              \ 'c': 'man',
              \ 'clojure': 'clojure',
              \ 'perl': 'perldoc',
              \ 'php': ['phpmanual', 'javascript', 'jquery'],
              \ 'ruby': 'refe',
              \ 'vim': '',
              \ 'cpp': 'man',
              \ 'tex': 'webdict',
              \ 'erlang': 'erlang',
              \ 'python': 'pydoc',
              \}

        augroup ref_vim
          autocmd!
          autocmd FileType ref-webdict call s:initialize_ref_viewer()
          autocmd FileType ref-man call s:initialize_ref_viewer()
          autocmd FileType php call s:initialize_ref_phpmanual()
        augroup END

        function! s:initialize_ref_phpmanual() "{{{
          if !isdirectory(g:ref_phpmanual_path)
            let b:confirm = input('Downlaod phpmanual(yes/no)>')
            if b:confirm =~? '^y'
              call tkngue#util#mkdir(fnamemodify(g:ref_phpmanual_path, ':p:h:h'), 1)
              exec '!{cd /tmp/;
                    \ wget -qO-  http://jp2.php.net/get/php_manual_ja.tar.gz/from/this/mirror
                    \ | tar xvfz -}
                    \ && mv /tmp/php-chunked-xhtml ' .  g:ref_phpmanual_path
            endif
          endif
        endfunction "}}}
        function! s:initialize_ref_viewer() "{{{
          nmap <buffer> b <Plug>(ref-back)
          nmap <buffer> f <Plug>(ref-forward)
          nnoremap <buffer> q <C-w>c
          setlocal nonumber
          " ... and more settings ...
        endfunction "}}}
        function! g:ref_source_webdict_sites.alc.filter(output) "{{{
          let l:output = substitute(a:output, "^.\\+_\\+", "", "")
          return "ALC dictoinary\n------------\n". join(split(l:output,'\n')[10:], "\n")
        endfunction "}}}
        function! g:ref_source_webdict_sites.weblio.filter(output) "{{{
          let l:output = substitute(a:output, '.\{-}から変更可能\n', '', "")
          let l:output = substitute(l:output, '\n\n', '\n', "g")
          let l:output = substitute(l:output, '\(\w\{1,2\}\)\n', '\1 ', "g")
          " let l:output = substitute(l:output, '\s*\a\zs\n\+', '', "g")
          return "Weblio dictoinary\n------------\n".join(split(l:output,'\n'), "\n")
        endfunction "}}}
      '''
 #}}}
    [[plugins]] # tyru/open-browser.vim {{{
      repo = 'tyru/open-browser.vim'
      on_if = 1
      on_cmd = 'OpenURL'
      hook_source = '''
        let g:openbrowser_search_engines = {
              \       'alc': 'http://eow.alc.co.jp/{query}/UTF-8/',
              \       'askubuntu': 'http://askubuntu.com/search?q={query}',
              \       'baidu': 'http://www.baidu.com/s?wd={query}&rsv_bp=0&rsv_spt=3&inputT=2478',
             \       'blekko': 'http://blekko.com/ws/+{query}',
              \       'cpan': 'http://search.cpan.org/search?query={query}',
              \       'devdocs': 'http://devdocs.io/#q={query}',
              \       'duckduckgo': 'http://duckduckgo.com/?q={query}',
              \       'github': 'http://github.com/search?q={query}',
              \       'google': 'http://google.com/search?q={query}',
              \       'google-scholar': 'https://scholar.google.co.jp/scholar?hl=ja&as_sdt=0,5&q={query}',
              \       'google-code': 'http://code.google.com/intl/en/query/#q={query}',
              \       'php': 'http://php.net/{query}',
              \       'python': 'http://docs.python.org/dev/search.html?q={query}&check_keywords=yes&area=default',
              \       'twitter-search': 'http://twitter.com/search/{query}',
              \       'twitter-user': 'http://twitter.com/{query}',
              \       'verycd': 'http://www.verycd.com/search/entries/{query}',
              \       'vim': 'http://www.google.com/cse?cx=partner-pub-3005259998294962%3Abvyni59kjr1&ie=ISO-8859-1&q={query}&sa=Search&siteurl=www.vim.org%2F#gsc.tab=0&gsc.q={query}&gsc.page=1',
              \       'wikipedia': 'http://en.wikipedia.org/wiki/{query}',
              \       'wikipedia-ja': 'http://ja.wikipedia.org/wiki/{query}',
              \       'yahoo': 'http://search.yahoo.com/search?p={query}',
              \}
        nmap gb <Plug>(openbrowser-smart-search)
        vmap gb <Plug>(openbrowser-smart-search)
        nmap gw :OpenBrowserSearch -wikipedia-ja <C-R><C-W><CR>
        nmap gs :OpenBrowserSearch -wikipedia-ja <C-R><C-W><CR>
        vmap gs :OpenBrowserSearch -goole-scholar <C-R><C-W><CR>
      '''
 #}}}
  [[plugins]] # lilydjwg/colorizer {{{
    repo = 'lilydjwg/colorizer'
    on_cmd = ['ColorHighlight']
    hook_source = ''''
        let g:colorizer_startup = 0
        let g:colorizer_nomap = 1
    '''
  #}}}
#}}}

#}}}

# vim: sw=2
